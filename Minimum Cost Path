An integer matrix of size (M x N) has been given. Find out the minimum cost to reach from the cell (0, 0) to (M - 1, N - 1).
From a cell (i, j), you can move in three directions:
1. ((i + 1),  j) which is, "down"
2. (i, (j + 1)) which is, "to the right"
3. ((i+1), (j+1)) which is, "to the diagonal"
The cost of a path is defined as the sum of each cell's values through which the route passes.
3 4
3 4 1 2
2 1 8 9
4 7 8 1
Sample Output 1 :
13
CODE:-
//using memorization
int helper(int **input,int **output,int m,int n,int i,int j ){
	if(i>=m||j>=n ){
		return INT_MAX;
	}
	if(i==m-1 && j==n-1){
		return input[i][j];
	}
	if(output[i][j]!=-1){
		return output[i][j];
	}
        int down = helper(input,output, m, n, i + 1, j);
        int left=helper(input,output, m, n, i, j+1);
        int diagonal = helper(input,output, m, n, i+1, j + 1);
		int a=input[i][j]+min(down,min(left,diagonal));
		output[i][j]=a;
		return a;
}
int minCostPath(int **input, int m, int n){
	int **output=new int*[m];
    for(int i=0;i<m;i++){
        output[i]= new int[n];
        for(int j=0;j<n;j++){
            output[i][j]=-1;
        }
    }
	return helper(input,output,m,n,0,0);
}
